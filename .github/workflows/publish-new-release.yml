name: "Publish new release"

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build_binary:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') # only merged release branches must trigger this
    name: Build binary
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Build ${{ matrix.os }} release binary
        id: build
        run: make build BUILD_ARGS='--release'

      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "::set-output name=version::$VERSION"

      - name: Create archive
        id: create-archive
        run: |
          MACHINE=$(uname -m)
          KERNEL=$(uname -s)
          VERSION=${{ steps.extract-version.outputs.version }}

          ARCHIVE="cnd_${VERSION}_${KERNEL}_${MACHINE}.tar.gz"

          tar -C ./target/release --create --file=$ARCHIVE cnd

          echo "::set-output name=archive::$ARCHIVE"

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}-release-archive
          path: ${{ steps.create-archive.outputs.archive }}

  create_docker_image:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') # only merged release branches must trigger this
    name: Create and publish Docker image
    needs: build_binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Download ubuntu release package
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest-release-archive

      - name: Move binary into correct place for Docker build
        run: |
          mkdir -p ./target/release

          tar --extract -f ./ubuntu-latest-release-archive/*.tar.gz -C ./target/release/

      - name: Login to docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "::set-output name=version::$VERSION"

      - name: Build docker image as ${{ steps.extract-version.outputs.version }} and latest
          run: |
            VERSION="${{ steps.extract-version.outputs.version }}"

            docker build . -t comitnetwork/cnd:$VERSION -t comitnetwork/cnd:latest

      - name: Test docker image by starting it and curling the cnd API
          run: |
            VERSION="${{ steps.extract-version.outputs.version }}"
            echo "::starting docker-container comitnetwork/cnd:$VERSION"
            docker run --publish 8000:8000 --detach --name cnd_container comitnetwork/cnd:$VERSION
            curl --fail localhost:9999/
            echo "::cnd API curled successfully"
            docker stop cnd_container

      - name: Publish docker image as ${{ steps.extract-version.outputs.version }} and latest
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          docker push comitnetwork/cnd:$VERSION
          docker push comitnetwork/cnd:latest


  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') # only merged release branches must trigger this
    name: Create GitHub release
    needs: [build_binary, create_docker_image]
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "::set-output name=version::$VERSION"

      - name: Download ubuntu release package
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest-release-archive

      - name: Download macos release package
        uses: actions/download-artifact@v1
        with:
          name: macos-latest-release-archive

      - name: Detect archives to upload
        id: detect-archives
        run: |
          echo "::set-output name=ubuntu-archive::$(cd ./ubuntu-latest-release-archive/; echo *.tar.gz)"
          echo "::set-output name=macos-archive::$(cd ./macos-latest-release-archive/; echo *.tar.gz)"

      - name: Create Release
        id: create-release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ steps.extract-version.outputs.version }}
          name: ${{ steps.extract-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload ubuntu release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./ubuntu-latest-release-archive/${{ steps.detect-archives.outputs.ubuntu-archive }}
          asset_name: ${{ steps.detect-archives.outputs.ubuntu-archive }}
          asset_content_type: application/gzip

      - name: Upload macos release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./macos-latest-release-archive/${{ steps.detect-archives.outputs.macos-archive }}
          asset_name: ${{ steps.detect-archives.outputs.macos-archive }}
          asset_content_type: application/gzip

  merge_release_into_dev:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') # only merged release branches must trigger this
    name: Merge release-branch back into dev
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "::set-output name=version::$VERSION"

      - name: Create pull request for merging release-branch back into dev
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: release/${{ steps.extract-version.outputs.version }}
          base: dev
          title: Merge release ${{ steps.extract-version.outputs.version }} into dev branch
          body: |
            This PR merges the release branch for ${{ steps.extract-version.outputs.version }} back into dev.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.

